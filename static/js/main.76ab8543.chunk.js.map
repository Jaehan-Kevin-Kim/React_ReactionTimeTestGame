{"version":3,"sources":["ReactionTimeCheck_Hooks.js","index.js"],"names":["ReactionTimeCheck_Hooks","useState","message","setMessage","color","setColor","result","setResult","resultsHistory","setResultsHistory","timeout","useRef","startTime","finishTime","requestHistoryClass","document","querySelector","id","className","onClick","current","setTimeout","Date","Math","floor","random","clearTimeout","prevState","length","console","log","classList","add","average","reduce","acc","cur","map","resultHistory","i","round","averagePrint","remove","ReactDOM","render","getElementById"],"mappings":"yMAgGeA,EA7FiB,WAAO,IAAD,EACNC,mBAAS,kBADH,mBAC7BC,EAD6B,KACpBC,EADoB,OAEVF,mBAAS,WAFC,mBAE7BG,EAF6B,KAEtBC,EAFsB,OAGRJ,mBAAS,IAHD,mBAG7BK,EAH6B,KAGrBC,EAHqB,OAIQN,mBAAS,IAJjB,mBAI7BO,EAJ6B,KAIbC,EAJa,KAM9BC,EAAUC,iBAAO,MACjBC,EAAYD,mBACZE,EAAaF,mBACbG,EAAsBC,SAASC,cAAc,uBAgEnD,OACE,qCACE,sBAAKC,GAAG,SAASC,UAAWd,EAAOe,QAhEvB,WACA,YAAVf,GACFD,EAAW,wCACXE,EAAS,SACTE,EAAU,IAEVG,EAAQU,QAAUC,YAAW,WAC3BT,EAAUQ,QAAU,IAAIE,KACxBnB,EAAW,eACXE,EAAS,SACRkB,KAAKC,MAAsB,IAAhBD,KAAKE,SAAkB,OAClB,UAAVrB,GACTsB,aAAahB,EAAQU,SACrBjB,EAAW,0CACXE,EAAS,UACU,UAAVD,GACTD,EAAW,kBACXE,EAAS,aAETQ,EAAWO,QAAU,IAAIE,KACzBf,EAAU,GAAD,OAAIM,EAAWO,QAAUR,EAAUQ,QAAnC,OACTf,EAAS,WACTI,GAAkB,SAACkB,GAAD,4BACbA,GADa,CAEhBd,EAAWO,QAAUR,EAAUQ,eAwCjC,UACE,mBAAGF,UAAU,YAAb,SAA0BhB,IAC1B,oBAAIgB,UAAU,SAAd,SAAwBZ,IACxB,qBAAKY,UAAU,qBAAf,SAC6B,IAA1BV,EAAeoB,OAAe,KA/BlB,WAEnB,GADAC,QAAQC,IAAItB,GACRA,EAAeoB,OAAS,IAAM,EAAG,CACnCd,EAAoBiB,UAAUC,IAAI,UAClC,IACMC,EADazB,EAAe0B,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,KAChC5B,EAAeoB,OAE5C,OACE,qCACE,+BACGpB,EAAe6B,KAAI,SAACC,EAAeC,GAClC,OACE,sCACOA,EAAI,EADX,KACgBD,EADhB,OAASC,EAAID,MAKjB,0BAEF,2CAAcf,KAAKiB,MAAMP,GAAzB,YAYsCQ,QAG1C,qBAAKvB,UAAU,eAAf,SAC6B,IAA1BV,EAAeoB,OAAe,KAC7B,wBAAQX,GAAG,eAAeE,QA5Cb,WACnBV,EAAkB,IAClBN,EAAW,kBACXE,EAAS,WACTE,EAAU,IACVO,EAAoBiB,UAAUW,OAAO,WAuC/B,+BCjFVC,IAASC,OAAO,cAAC,EAAD,IAA6B7B,SAAS8B,eAAe,W","file":"static/js/main.76ab8543.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './ReactionTimeCheck.css';\r\n\r\nconst ReactionTimeCheck_Hooks = () => {\r\n  const [message, setMessage] = useState('Click to start');\r\n  const [color, setColor] = useState('waiting');\r\n  const [result, setResult] = useState('');\r\n  const [resultsHistory, setResultsHistory] = useState([]);\r\n\r\n  const timeout = useRef(null);\r\n  const startTime = useRef();\r\n  const finishTime = useRef();\r\n  const requestHistoryClass = document.querySelector('.resultHistoryClass');\r\n\r\n  const onClick = () => {\r\n    if (color === 'waiting') {\r\n      setMessage('Click when the screen turns to green');\r\n      setColor('ready');\r\n      setResult('');\r\n\r\n      timeout.current = setTimeout(() => {\r\n        startTime.current = new Date();\r\n        setMessage('Click Now!!');\r\n        setColor('now');\r\n      }, Math.floor(Math.random() * 2000 + 2000));\r\n    } else if (color === 'ready') {\r\n      clearTimeout(timeout.current);\r\n      setMessage('You clicked too early, Click for retry');\r\n      setColor('early');\r\n    } else if (color === 'early') {\r\n      setMessage('Click to start');\r\n      setColor('waiting');\r\n    } else {\r\n      finishTime.current = new Date();\r\n      setResult(`${finishTime.current - startTime.current}ms`);\r\n      setColor('waiting');\r\n      setResultsHistory((prevState) => [\r\n        ...prevState,\r\n        finishTime.current - startTime.current,\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const resetHistory = () => {\r\n    setResultsHistory([]);\r\n    setMessage('Click to start');\r\n    setColor('waiting');\r\n    setResult('');\r\n    requestHistoryClass.classList.remove('active');\r\n  };\r\n\r\n  const averagePrint = () => {\r\n    console.log(resultsHistory);\r\n    if (resultsHistory.length % 3 === 0) {\r\n      requestHistoryClass.classList.add('active');\r\n      const resultsSum = resultsHistory.reduce((acc, cur) => acc + cur);\r\n      const average = resultsSum / resultsHistory.length;\r\n\r\n      return (\r\n        <>\r\n          <ul>\r\n            {resultsHistory.map((resultHistory, i) => {\r\n              return (\r\n                <li key={i + resultHistory}>\r\n                  Try {i + 1}: {resultHistory}ms\r\n                </li>\r\n              );\r\n            })}\r\n            <li></li>\r\n          </ul>\r\n          <h3>Average: {Math.round(average)}ms</h3>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id='screen' className={color} onClick={onClick}>\r\n        <p className='paragraph'>{message}</p>\r\n        <h4 className='result'>{result}</h4>\r\n        <div className='resultHistoryClass'>\r\n          {resultsHistory.length === 0 ? null : averagePrint()}\r\n        </div>\r\n      </div>\r\n      <div className='btnContainer'>\r\n        {resultsHistory.length !== 3 ? null : (\r\n          <button id='resetHistory' onClick={resetHistory}>\r\n            Start Again\r\n          </button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReactionTimeCheck_Hooks;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import ReactionTimeCheck from './ReactionTimeCheck';\nimport ReactionTimeCheck_Hooks from './ReactionTimeCheck_Hooks';\n\nReactDOM.render(<ReactionTimeCheck_Hooks />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}